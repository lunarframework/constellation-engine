[gd_resource type="Shader" format=2]

[resource]
code = "shader_type spatial;
render_mode unshaded;

uniform vec3 center;
uniform float radius = 1.0;

void fragment() {
	vec3 ray_origin = (CAMERA_MATRIX * (vec4(VERTEX, 1.0))).xyz;
	vec3 ray_dir = normalize(CAMERA_MATRIX * (vec4(-VIEW, 0.0))).xyz;
	
	vec3 origin_to_center = ray_origin - center;
	
	float a = dot(origin_to_center, ray_dir);
	float b = dot(origin_to_center, origin_to_center) - radius * radius;
	float h = a * a - b;
	if (h < 0.0) {
		discard;
	}
	
	float dist = -a - sqrt(h);
	
	vec3 world_pos = ray_origin + ray_dir * dist;
	
	vec4 clip = PROJECTION_MATRIX * INV_CAMERA_MATRIX * vec4(world_pos, 1.0);
	
	DEPTH = (clip.z / clip.w) * 0.5 + 0.5;
	
	ALBEDO = vec3(1.0, 0.0, 0.0);
}"
