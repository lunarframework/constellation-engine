[gd_resource type="Shader" format=2]

[resource]
code = "shader_type spatial;
render_mode unshaded;

vec3 mod289_3(vec3 x) {
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 mod289_4(vec4 x) {
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 permute(vec4 x) {
    return mod289_4(((x * 34.0) + 1.0) * x);
}

vec4 taylorInvSqrt(vec4 r) {
    return 2.79284291400159 - 0.85373472095314 * r;
}

float snoise(vec3 v) { 
    vec2 C = vec2(1.0/6.0, 1.0/3.0) ;
    vec4 D = vec4(0.0, 0.5, 1.0, 2.0);
    
    // First corner
    vec3 i  = floor(v + dot(v, vec3(C.y)) );
    vec3 x0 = v - i + dot(i, vec3(C.x)) ;
    
    // Other corners
    vec3 g = step(x0.yzx, x0.xyz);
    vec3 l = 1.0 - g;
    vec3 i1 = min( g.xyz, l.zxy );
    vec3 i2 = max( g.xyz, l.zxy );
    
    //   x0 = x0 - 0.0 + 0.0 * C.xxx;
    //   x1 = x0 - i1  + 1.0 * C.xxx;
    //   x2 = x0 - i2  + 2.0 * C.xxx;
    //   x3 = x0 - 1.0 + 3.0 * C.xxx;
    vec3 x1 = x0 - i1 + vec3(C.x);
    vec3 x2 = x0 - i2 + vec3(C.y); // 2.0*C.x = 1/3 = C.y
    vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y
    
    // Permutations
    i = mod289_3(i); 
    vec4 p = permute( permute( permute( 
    		 i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
    	   + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) 
    	   + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));
    
    // Gradients: 7x7 points over a square, mapped onto an octahedron.
    // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
    float n_ = 0.142857142857; // 1.0/7.0
    vec3  ns = n_ * D.wyz - D.xzx;
    
    vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)
    
    vec4 x_ = floor(j * ns.z);
    vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)
    
    vec4 x = x_ *ns.x + vec4(ns.y);
    vec4 y = y_ *ns.x + vec4(ns.y);
    vec4 h = 1.0 - abs(x) - abs(y);
    
    vec4 b0 = vec4( x.xy, y.xy );
    vec4 b1 = vec4( x.zw, y.zw );
    
    //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;
    //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;
    vec4 s0 = floor(b0)*2.0 + 1.0;
    vec4 s1 = floor(b1)*2.0 + 1.0;
    vec4 sh = -step(h, vec4(0.0));
    
    vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
    vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;
    
    vec3 p0 = vec3(a0.xy,h.x);
    vec3 p1 = vec3(a0.zw,h.y);
    vec3 p2 = vec3(a1.xy,h.z);
    vec3 p3 = vec3(a1.zw,h.w);
    
    //Normalise gradients
    vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
    p0 *= norm.x;
    p1 *= norm.y;
    p2 *= norm.z;
    p3 *= norm.w;
    
    // Mix final noise value
    vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), vec4(0.0));
    m = m * m;
    return 22.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3) ) );
}

float noise(vec3 position, int octaves, float frequency, float lacunarity) {
	float total = 0.0;
	float amplitude = 1.0;
	for (int i = 0; i < octaves; i++) {
		total += amplitude * snoise(position);
		amplitude *= frequency;
		position *= lacunarity;
	}
	return total;
}

vec3 temp_to_color(float temp) {
	vec3 color = vec3(255.0, 255.0, 255.0);
    color.x = 56100000. * pow(temp, -1.5) + 148.0;
    color.y = 100.04 * log(temp) - 623.6;
    if (temp > 6500.0) color.y = 35200000.0 * pow(temp, -1.5) + 184.0;
    color.z = 194.18 * log(temp) - 1448.6;
    color = clamp(color, 0.0, 255.0)/255.0;
    if (temp < 1000.0) color *= temp/1000.0;
    return color;
}

uniform int granule_octaves = 4;
uniform float granule_frequency = 0.5;
uniform float granule_lacunarity = 40.0;

uniform float sunspot_frequency = 2.7;
uniform float sunspot_radius = 2.0;
uniform float sunspot_cutoff = 1.0;

uniform float fresnel_power = 1.0;
uniform float fresnel_energy = 1.0;

uniform float energy = 1.0;

uniform sampler2D gradient;

varying vec3 local;

void vertex() {
	local = VERTEX;
}

void fragment() {
	//////////////////////////
	// Star Surface Effects //
	//////////////////////////
	
	// Compute temp
	
	float granules = 1.0 - abs(noise(local + vec3(TIME / 10.0), granule_octaves, granule_frequency, granule_lacunarity));
	// float granules = (noise(local, granule_octaves, granule_frequency, granule_lacunarity) + 1.0) * 0.5;
	
	float sunspots = max(snoise(local * sunspot_frequency - vec3(0.0, TIME / 20.0, 0.0)) * sunspot_radius - sunspot_cutoff, 0.0);
	
	float temp = granules - sunspots;
	
	float fresnel = pow(1.0 - dot(NORMAL, VIEW), fresnel_power);

	
	vec3 color = energy * texture(gradient, vec2(clamp(temp, 0.0, 1.0) * max(1.0, temp - 1.0), 0.0)).xyz;
	
	color *=  fresnel_energy * fresnel + 1.0;
	
	// ALBEDO = vec3((noise(local_pos, 4, 0.5, 40.0) + 1.0) * 0.5);
	ALBEDO = color;
}"
